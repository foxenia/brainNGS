#commands are perfoming in the terminal of the work computer (screen), except if mentioned #*
#*ssh (*command in the laptop terminal)
ssh ksenia@172.27.47.71
# folders were created on the work computer
mkdir -p projects/brainNGS/ref/h38_e110
#* modified virus references and the human reference were downloaded to this folder from the laptop (*command in the laptop terminal)
rsync -auR --progress projects/brainNGS/ref/h38_e110/gen* ksenia@172.27.47.71:
#Terminal looks like this and it's transferring quite long:
#sending incremental file list
#projects/
#projects/brainNGS/
#projects/brainNGS/ref/
#projects/brainNGS/ref/h38_e110/
#projects/brainNGS/ref/h38_e110/genes.gtf

# download anaconda on the work computer
curl -O https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-x86_64.sh
# install anaconda
bash ~/Anaconda3-2024.10-1-Linux-x86_64.sh

#create a new environment ("NGS" - an environment name)
conda create --name NGS
conda activate NGS

#add bioconda
conda config --add channels bioconda
conda config --add channels conda-forge

#install star
conda install star

# screen:
screen # start new screen
screen -S name # start screen with this name
screen -ls # show all screens
screen -r name # attach screen
# ctrl-A-D - dettach screen

# connect to remote
# sudo ipsec restart # after changing config
sudo ipsec up CAM # start VPN
# sudo ipsec down CAM # close VPN
ssh ksenia@172.27.47.71

# remote jupyter lab
# on remote server
conda activate NGS
jupyter lab --no-browser --port=8888 --ip='0.0.0.0' --NotebookApp.token=fox
# paste this url into local browser
172.27.47.71:8888/lab?token=fox

#*copy Lera's modified gtf and virus genomes to the lab server
(NGS) foxenia@home-asus:~/projects/brainNGS/ref/h38_e110_new$ rsync -auR all* ksenia@172.27.47.71:/mnt/data4A/ksenia/projects/brainNGS/ref/h38_e110_new

#combine fa and gtf on the lab server
gunzip *all
(base) [ksenia@localhost h38_e110_new]$ cat *.gtf > genes.gtf
(base) [ksenia@localhost h38_e110_new]$ cat Homo_sapiens.GRCh38.dna.primary_assembly.fa all_virus.fasta > genomes.fa

#turn on STAR on the lab server
(base) [ksenia@localhost h38_e110_new]$ conda activate NGS
(NGS) [ksenia@localhost h38_e110_new]$ STAR \
>  --runThreadN 4 \
>  --runMode genomeGenerate \
>  --genomeDir genome \
>  --genomeFastaFiles genomes.fa \
>  --sjdbGTFfile genes.gtf \
>  --sjdbOverhang 100

#20 january 2025, for the github and for the notebook 04_read count
*#from the home laptop, cd /projects/brainNGS
git add src
git commit -m 'all folder'
git push

#from the server
#remember github credentials
git config --global credential.helper store
git remote add origin https://github.com/foxenia/brainNGS.

# install multiqc
conda install bioconda::multiqc

# install htseq 
conda deactivate //#NGS env
conda create --name htseq
conda install bioconda::htseq

#ctrl+shift+C - kill the processes

# before count analysis, install R
conda inactivate //htseq
conda create --name r_env r-essentials r-base
conda activate r_env
# Install the R Kernal
conda install -c r r-irkernel

#03 february 2025, new analysis for gut NGS
#previously, brain NGS was analysed on my laptop, so now I need to add bbmap for bbduk_trimming. Now, I'm using conda install bioconda::bbmap, previously, I unpacked a set of bbduk scripts, but this variant works, too.
#read counts
#grep find all lines in files with the pattern (remove ENS (human) and __(#__not_aligned ))
grep -v ENS output/brain/counts/* | grep -v '__'
grep -v ENS output/gut/counts/* | grep -v '__'

#4 feb 2025
#how many lines in the folder
ls -lh output/gut/counts/ |  wc -l
#find _S in Untitled change _ with space
grep _S Untitled\ Document\ 2 | cut -f1 | tr _ "\t"
#write it in the table
grep _S Untitled\ Document\ 2 | cut -f1 | tr _ "\t" > gut_samples.tsv

#13 feb 2025
#change manually all_virus.gtf and all_virus.fa, then make new human+virus reference and human+virus gtf
conda activate NGS
go to the folder (NGS) [ksenia@add-01 h38_e110_new]
(NGS) [ksenia@add-01 h38_e110_new]$ cd ../../ref/h38_e110_new
(NGS) [ksenia@add-01 h38_e110_new]$ cat Homo_sapiens.GRCh38.110.gtf all_virus.gtf > genes_new.gtf
(NGS) [ksenia@add-01 h38_e110_new]$ cat Homo_sapiens.GRCh38.dna.primary_assembly.fa all_virus.fasta > genomes_new.fa

#Indexed the human+virus reference and human+virus gtf using the command similar to Katy's scripts/index_genome.sh.
STAR --runThreadN 4 --runMode genomeGenerate --genomeDir genome_new --genomeFastaFiles genomes_new.fa --sjdbGTFfile genes_new.gtf --sjdbOverhang 100

#but it wasn't nessesary to STAR index, but I did it. Now I'm continuing with read counts - NO!!! as i guess it's wrong, because i needed to change index!!!
#Count reads per gene
# at the beginning, we started without "&", but it took quite long, so we start it in parallel (8 samples-8 cores). For more samples, not recommended.
conda inactivate 
conda activate htseq
#go to the folder (htseq) [ksenia@add-01 brainNGS]$
for sid in `ls -1 mapped/brain/`
do
 echo $sid 
 htseq-count \
  -m intersection-nonempty \
  -s yes \
  -f bam \
  -r pos \
  mapped/brain/$sid/Aligned.sortedByCoord.out.bam \
  ref/h38_e110_new/genes_new.gtf \
  > output/brain/counts_new/${sid}.tsv& 
done 
#so counting with old index and new gtf was wrong action since i changed fasta too. so next step is mapping after index.

#mapping with new genome index - i use in the terminal (th code is taken from 03_map.sh and changed with other folders and genome index)
(NGS) [ksenia@add-01 brainNGS]
FQ=data/trimmed_bbduk_brain
REF=ref/h38_e110_new/genome_new


for id in 1 2 3 4 5 6 7 8
do
	echo id
	mkdir mapped/brain/VL$id
	STAR --runThreadN 8 --genomeDir $REF \
		--readFilesIn ${FQ}/VL${id}_S${id}_R1_001_trimmed.fastq.gz,${FQ}/VL${id}_S${id}r_R1_001_trimmed.fastq.gz --outFilterType BySJout \
		--outFilterMultimapNmax 20 --alignSJoverhangMin 8 \
		--alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 \
		--outFilterMismatchNoverLmax 0.6 --alignIntronMin 20 \
		--alignIntronMax 1000000 --alignMatesGapMax 1000000 \
		--outSAMattributes NH HI NM MD --outSAMtype BAM SortedByCoordinate \
		--outFileNamePrefix mapped/brain/VL$id/ \
		--readFilesCommand zcat 2>mapped/brain/VL$id/log.txt
done

#multiqc for mapped brain data
(NGS) [ksenia@add-01 brainNGS]$ multiqc -o output/brain mapped

#read counts
#htseq
conda deactivate //NGS env
conda activate htseq

# index bam files
(htseq) [ksenia@add-01 brain]$ for dir in VL1 VL2 VL3 VL4 VL5 VL6 VL7 VL7 VL8
> do
>     bamfile="$dir/Aligned.sortedByCoord.out.bam"  # Путь к BAM-файлу
>     samtools index -@ 8 "$bamfile" # Создаем индекс с указанием папки
> done


#Count reads per gene
(htseq) [ksenia@add-01 brainNGS]$ for sid in `ls -1 mapped/brain/`
 do
  echo $sid 
  htseq-count \
   -m intersection-nonempty \
   -s yes \
   -f bam \
   -r pos \
   mapped/brain/$sid/Aligned.sortedByCoord.out.bam \
   ref/h38_e110_new/genes_new.gtf \
   > output/brain/counts/${sid}.tsv&  
 done

#diff exp for brain data
in Jupiter notebook 5
getwd ()
'/mnt/data4A/ksenia/projects/brainNGS/src/brain'
repeat all notebook, new figure of viral expression

#mapping for gut data with new virus+human index (done earlier today)
(NGS) [ksenia@add-01 brainNGS]$ 

FQ=data/trimmed_bbduk_gut
REF=ref/h38_e110_new/genome_new


for id in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
do
	echo id
	mkdir -p mapped/gut/$id
	STAR --runThreadN 8 --genomeDir $REF \
		--readFilesIn ${FQ}/${id}_S${id}_R1_001_trimmed.fastq.gz --outFilterType BySJout \
		--outFilterMultimapNmax 20 --alignSJoverhangMin 8 \
		--alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 \
		--outFilterMismatchNoverLmax 0.6 --alignIntronMin 20 \
		--alignIntronMax 1000000 --alignMatesGapMax 1000000 \
		--outSAMattributes NH HI NM MD --outSAMtype BAM SortedByCoordinate \
		--outFileNamePrefix mapped/gut/$id/ \
		--readFilesCommand zcat 2> mapped/gut/$id/log.txt
done

#multiqc for mapped gut data
(NGS) [ksenia@add-01 brainNGS]$ multiqc -o output/gut mapped

#read counts for gut
#htseq
conda deactivate //NGS env
conda activate htseq

ls -1 mapped/gut | parallel -j8 "htseq-count \
  -m intersection-nonempty \
  -s yes \
  -f bam \
  -r pos \
  mapped/gut/{}/Aligned.sortedByCoord.out.bam \
  ref/h38_e110_new/genes_new.gtf \
  > output/gut/counts/{}.tsv" 

20 feb 2025
#switch S9 and S10 samples for gut due to virus level - 05_diffexp_mod_S9vsS10.ipynb
#combine brain and gut tables (counts and samples), for genes - take gut_genes, because brain_genes is weird file (confused names of columns)- 06_combine_both_data.ipynb

04 mar 2025
#notebook - 07_diffexp_both.jpynb
#in the table "both_samples.tsv", the column name "virus" was changed to "condition" for deseq, new table name is "both_samples_condition.tsv".
samples <- read.table('both_samples.tsv')
# Переименовываем столбец 'virus' на 'condition'
colnames(samples)[colnames(samples) == "virus"] <- "condition"
# Проверяем, что столбец был переименован
print(colnames(samples))
# Если нужно сохранить измененный файл
write.table(samples, 'both_samples_condition.tsv')

10 mar 2025
#last time, i had NA for padj
from Padj = NA:
Here (https://rdrr.io/bioc/DESeq2/man/results.html) они говорят что у них там встроенная фильтрация по покрытию для максимизации числа значимых. ИМХО, звучит как очень корявая процедура, я бы ее отключил results(,independentFiltering=FALSE) 

old commands:
1) #pre-filtering, to keep genes that have at least 10 reads in 3 or more samples
smallestGroupSize <- 3
keep <- rowSums(counts(deseq) >= 10) >= smallestGroupSize
deseq <- deseq[keep,]
2) dim(deseq) #output: 12315 12
3) #deseq for all viruses together
deseq = DESeq(deseq)

cnds = c('MLB2','VA1','HAstV4')
res = lapply(cnds,function(c)results(deseq,contrast = c('condition','Mock',c)))
names(res) = cnds

## and I had N/A for padj in case of MLB2 (others are ok)
##start of output
baseMean log2FoldChange     lfcSE       stat    pvalue
                 <numeric>      <numeric> <numeric>  <numeric> <numeric>
ENSG00000142611  332.03747      0.0190699  0.207619  0.0918509  0.926817
ENSG00000157911  131.82447     -0.0162540  0.325888 -0.0498760  0.960221
ENSG00000142655  111.76362     -0.2608003  0.453924 -0.5745459  0.565598
ENSG00000149527    9.56838      1.7543252  2.701744  0.6493307  0.516125
ENSG00000171621  108.73329     -0.3656743  0.520700 -0.7022743  0.482508
...                    ...            ...       ...        ...       ...
ENSG00000198727 91185.5659     -0.0693728 0.0762288 -0.9100593  0.362791
ENSG00000276256    25.0797      0.3108140 0.8821449  0.3523389  0.724584
ENSG00000273748    45.5163      0.4347423 0.6779253  0.6412835  0.521339
ENSG00000278817    13.9926      0.4284192 2.4735840  0.1731978  0.862496
ENSG00000271254    20.7900     -0.0435080 1.9055434 -0.0228323  0.981784
                     padj
                <numeric>
ENSG00000142611        NA
ENSG00000157911        NA
ENSG00000142655        NA
ENSG00000149527        NA
ENSG00000171621        NA
...                   ...
ENSG00000198727  0.719912
ENSG00000276256        NA
ENSG00000273748        NA
ENSG00000278817        NA
ENSG00000271254        NA
##end of output

sapply(res,function(x){
    c(sign=sum(x$padj<0.05 & abs(x$log2FoldChange)>1,na.rm=T))
})
#output
MLB2.sign
    1
VA1.sign
    185
HAstV4.sign
    534
#end

#today notebook - 075_diffexp_gut_undif_contrast_nofilter.ipynb
# command with the new argument was a working solution
cnds = c('MLB2','VA1','HAstV4')
res = lapply(cnds,function(c)results(deseq,contrast = c('condition','Mock',c), independentFiltering=FALSE))
names(res) = cnds

##start of output
$MLB2
log2 fold change (MLE): condition Mock vs MLB2 
Wald test p-value: condition Mock vs MLB2 
DataFrame with 12315 rows and 6 columns
                  baseMean log2FoldChange     lfcSE       stat    pvalue
                 <numeric>      <numeric> <numeric>  <numeric> <numeric>
ENSG00000142611  332.03747      0.0190699  0.207619  0.0918509  0.926817
ENSG00000157911  131.82447     -0.0162540  0.325888 -0.0498760  0.960221
ENSG00000142655  111.76362     -0.2608003  0.453924 -0.5745459  0.565598
ENSG00000149527    9.56838      1.7543252  2.701744  0.6493307  0.516125
ENSG00000171621  108.73329     -0.3656743  0.520700 -0.7022743  0.482508
...                    ...            ...       ...        ...       ...
ENSG00000198727 91185.5659     -0.0693728 0.0762288 -0.9100593  0.362791
ENSG00000276256    25.0797      0.3108140 0.8821449  0.3523389  0.724584
ENSG00000273748    45.5163      0.4347423 0.6779253  0.6412835  0.521339
ENSG00000278817    13.9926      0.4284192 2.4735840  0.1731978  0.862496
ENSG00000271254    20.7900     -0.0435080 1.9055434 -0.0228323  0.981784
                     padj
                <numeric>
ENSG00000142611  0.995247
ENSG00000157911  0.996721
ENSG00000142655  0.956164
ENSG00000149527  0.945537
ENSG00000171621  0.937234
...                   ...
ENSG00000198727  0.900453
ENSG00000276256  0.980148
ENSG00000273748  0.945944
ENSG00000278817  0.989807
ENSG00000271254  0.998818
##end of output

sapply(res,function(x){
    c(sign=sum(x$padj<0.05 & abs(x$log2FoldChange)>1,na.rm=T))
})
#output
MLB2.sign
    10
VA1.sign
    185
HAstV4.sign
    534
#end

then I made a similar notebook - 076_diffexp_gut_dif_contrast_nofilter.ipynb

today, I made csv for undiff and diff for significant genes (f = x$padj < 0.05 & abs(x$log2FoldChange) > 1)

and then I wanted to make Log fold change shrinkage for visualization and ranking (https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#data), checked resultsNames(deseq) for creating the correct comand, and it turned out that everithing is comparing with HastV4 (intercept''condition_MLB2_vs_HAstV4''condition_Mock_vs_HAstV4''condition_VA1_vs_HAstV4'). 
Но выдача res правильная в этой ситуации:
$MLB2
log2 fold change (MLE): condition Mock vs MLB2 
Wald test p-value: condition Mock vs MLB2 
DataFrame with 12262 rows and 6 columns
(для остальных вирусов то же).
Now I think that:
1) Когда я использую команду: results(deseq, contrast = c('condition', 'Mock', c)),
я явно задаю контраст, чтобы сравнить каждый вирус с Mock. Даже если в resultsNames(deseq) появятся коэффициенты, сравнивающие различные вирусы с HAstV4, сама команда results() правильно интерпретирует ваш контраст и выполняет сравнение с Mock.
Но пока я думаю, что переделывать не нужно, тк:
Почему же в resultsNames(deseq) другие коэффициенты?

resultsNames(deseq) выводит все доступные коэффициенты, то есть все возможные сравнения для каждого уровня фактора condition. В вашем случае, так как HAstV4 является референсным уровнем (до того, как вы явно зададите Mock как референсный), выводится информация о сравнении всех условий с HAstV4. Но это не влияет на корректность ваших контрастов, потому что вы явно указали, что хотите сравнивать с Mock.
Итак:

    Контраст в results() правильно интерпретирует, что вы хотите сравнивать с Mock, и это дает корректные результаты.
    resultsNames(deseq) просто показывает все возможные коэффициенты, в том числе те, что сравнивают вирусы с HAstV4. Это не влияет на корректность вашего анализа, так как вы контролируете контраст через параметр contrast.

Таким образом, ваша выдача в res правильная, потому что контраст явно указывает, что вы сравниваете каждый вирус с Mock, несмотря на наличие других коэффициентов в resultsNames(deseq).

#25 March 2025
Using notebooks "07...._contrast_nofilter" for brain, gundiff, gdiff, gut, I made heatmaps for all of them, but they clustered not by viruses (Katy's one is better, but she didn't change S9 to S10.

27 March 2025
1) saverds - I'm using today rds from 25/03 and 27/03
#gdiff:
saveRDS(gdiff_go,'../../rds/gdiff_go.rds')
saveRDS(gdiff_sgn_genes,'../../rds/gdiff_sgn_genes.rds')
2)compareCluster and dotplots for all
at the beginning, gene_uni is separately generated each time.
for the general picture, there is 'union' list for all genes.
gdiff_go = compareCluster(gdiff_sgn_genes,
                       fun='enrichGO',
                       universe      = gene_uni,
                       pAdjustMethod = "BH",
                       ont='ALL',
                       OrgDb = 'org.Hs.eg.db',
                       keyType = 'ENSEMBL')
gene_uni <- rownames(deseq_gdiff$MLB2) #12262
gdiff_sgn_genes = lapply(deseq_gdiff,function(x)rownames(x)[!is.na(x$padj) & x$padj<0.05 & x$log2FoldChange > 1])

#other (brain and gundiff) in similar way:
gene_uni <- rownames(deseq_gundiff$MLB2) #12315
gundiff_sgn_genes = lapply(deseq_gundiff,function(x)rownames(x)[!is.na(x$padj) & x$padj<0.05 & x$log2FoldChange > 1])
gundiff_go = compareCluster(gundiff_sgn_genes,
                       fun='enrichGO',
                       universe      = gene_uni,
                       pAdjustMethod = "BH",
                       ont='ALL',
                       OrgDb = 'org.Hs.eg.db',
                       keyType = 'ENSEMBL')
b_sgn_genes = lapply(deseq_brain,function(x)rownames(x)[!is.na(x$padj) & x$padj<0.2])
3) libraries used
library(DESeq2)
library(enrichplot)
library(clusterProfiler)
library(ggplot2)
library(org.Hs.eg.db)
4) cnetplot
Here, I’m using GO. 

For all datasets, I use qvalueCutoff = 0.05 and pAdjustMethod = "BH", except less strict parameters for MLB2 in gundiff (pAdjustMethod = "none"(# Try removing multiple testing correction),  pvalueCutoff = 0.1(# Allow more GO terms), qvalueCutoff = 0.2 (# Less strict threshold), because it gave no results and an error. 

Datasets as usually (were created separately (gut: x$padj<0.05 & x$log2FoldChange > 1; brain: x$padj<0.2)). 

4 Apr 2025 Friday
#list and visualization for common genes among all viruses in each tissue

8 Apr 2025 Tuesday
1) intersect_correlations.txt - here, there are correlations when plots were created. it's not high, but it's ok for this conditions.
2) 15_0_PlotPair_top.ipynb - notebook for making pairs plot with top findings (15,50), also with the similar notebook, but without top_n (notebook not saved) was used to create pair plots for all possible pairs (by tissue and by virus). they were downloaded on onedrive.
3) 15_1_PlotPair_virus.ipynb was used to create all 9 pictures in one (pairs of viruses in each tissue).